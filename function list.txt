public APLRes:AskPluginLoad2(Handle:myself, bool:late, String:error[], err_max)
public OnPluginStart()
public bool:HaleTargetFilter(const String:pattern[], Handle:clients)
public OnLibraryAdded(const String:name[])
public OnLibraryRemoved(const String:name[])
public OnConfigsExecuted()
public OnMapStart()
public OnMapEnd()
public OnPluginEnd()
public AddToDownload()
public CvarChange(Handle:convar, const String:oldValue[], const String:newValue[])
public Action:Timer_Announce(Handle:hTimer)
public Action:event_round_start(Handle:event, const String:name[], bool:dontBroadcast)
public Action:Timer_EnableCap(Handle:timer)
public Action:Timer_CheckDoors(Handle:hTimer)
public CheckArena()
public Action:event_round_end(Handle:event, const String:name[], bool:dontBroadcast)
public Action:Timer_NineThousand(Handle:timer)
public Action:Timer_CalcScores(Handle:timer)
public Action:StartResponceTimer(Handle:hTimer)
public Action:tTenSecStart(Handle:hTimer, any:ofs)
public Action:StartHaleTimer(Handle:hTimer)
public Action:Timer_MusicPlay(Handle:timer)
public Action:Timer_MusicTheme(Handle:timer, any:pack)
public Action:GottamTimer(Handle:hTimer)
public Action:StartRound(Handle:hTimer)
public Action:Timer_ReEquipSaxton(Handle:timer)
public Action:Timer_SkipHalePanel(Handle:hTimer)
public SkipHalePanelH(Handle:menu, MenuAction:action, param1, param2)
public Action:EnableSG(Handle:hTimer, any:iid)
public Action:RemoveEnt(Handle:timer, any:entid)
public Action:MessageTimer(Handle:hTimer, any:client)
public Action:MakeModelTimer(Handle:hTimer)
public Action:MakeHale(Handle:hTimer)
public Action:TF2Items_OnGiveNamedItem(client, String:classname[], iItemDefinitionIndex, &Handle:hItem)
public Action:evEquipped(Handle:hEvent, const String:sName[], bool:bDontBroadcast)
public Action:MakeNoHale(Handle:hTimer, any:clientid)
public Action:Timer_NoHonorBound(Handle:timer, any:userid)
public Action:event_destroy(Handle:event, const String:name[], bool:dontBroadcast)
public Action:event_changeclass(Handle:event, const String:name[], bool:dontBroadcast)
public Action:event_uberdeployed(Handle:event, const String:name[], bool:dontBroadcast)
public Action:Timer_Vaccine(Handle:hTimer, any:medigunid) //10hp/s 20%ammo/s 40metal/5s 8metal/s 5%cloak/s
public Action:Timer_Lazor(Handle:hTimer, any:medigunid)
public Action:Timer_Lazor2(Handle:hTimer, any:medigunid)
public Action:Command_GetHPCmd(client, args)
public Action:Command_GetHP(client)
public Action:Command_MakeNextSpecial(client, args)
public Action:Command_NextHale(client, args)
public Action:Command_HaleSelect(client, args)
public Action:Command_Points(client, args)
public Action:Command_HaleSetHP(client, args)
public Action:Command_HaleSetMaxHP(client, args)
public Action:Command_StopMusic(client, args)
public Action:Command_Point_Disable(client, args)
public Action:Command_Point_Enable(client, args)
public OnClientPostAdminCheck(client) // OnClientPutInServer
public OnClientDisconnect(client)
public OnHookedEvent(Handle:hEvent, const String:strEventName[], bool:bHidden)
public Action:Timer_SetDisconQueuePoints(Handle:timer, Handle:pack)
public Action:event_player_spawn(Handle:event, const String:name[], bool:dontBroadcast)
public Action:OnPlayerRunCmd(client, &buttons, &impulse, Float:vel[3], Float:angles[3], &weapon)
public Action:ClientTimer(Handle:hTimer)
public OnPreThinkPost(client)
public Action:HaleTimer(Handle:hTimer)
public Action:HHHTeleTimer(Handle:timer)
public Action:Timer_StunHHH(Handle:timer, Handle:pack)
public Action:Timer_BotRage(Handle:timer)
public Action:Timer_GravityCat(Handle:timer, any:userid)
public Action:Destroy(client, const String:command[], argc)
public TF2_OnConditionAdded(client, TFCond:cond)
public Action:tChocoSteak(Handle:hTimer, any:ref) //|TIMER_REPEAT
public Action:tSandvichHeal(Handle:hTimer, any:ref)
public TF2_OnConditionRemoved(client, TFCond:cond)
public Action:tRefreshFood(Handle:hTimer, any:ref) //|TIMER_REPEAT
public Action:cdEureka(iClient, const String:sCommand[], iArgc)
public Action:tEatAmmo(Handle:timer, Handle:pack)
public Action:tDestroyTele(Handle:timer, any:entid)
public Action:cdVoiceMenu(iClient, const String:sCommand[], iArgc)
public Action:DoTaunt(client, const String:command[], argc)
public Action:Timer_NoTaunting(Handle:timer)
public Action:DoSuicide(client, const String:command[], argc)
public Action:DoSuicide2(client, const String:command[], argc)
public Action:UseRage(Handle:hTimer, any:dist)
public Action:UseUberRage(Handle:hTimer, any:param)
public Action:UseBowRage(Handle:hTimer)
public Action:UseLemonRage(Handle:hTimer)
public Action:EndLemonRage(Handle:hTimer)
public Action:event_player_death(Handle:event, const String:name[], bool:dontBroadcast)
public Action:EndCaveKillTimer(Handle:hTimer)
public Action:Timer_Damage(Handle:hTimer, any:id)
public Action:event_deflect(Handle:event, const String:name[], bool:dontBroadcast)
public Action:event_jarate(UserMsg:msg_id, Handle:bf, const players[], playersNum, bool:reliable, bool:init)
public Action:CheckAlivePlayers(Handle:hTimer)
public Action:event_hurt(Handle:event, const String:name[], bool:dontBroadcast)
public Action:CapResetDMG(Handle:timer)
public Action:OnTakeDamage(iVictim, &iAtker, &iInflictor, &Float:flDamage, &iDmgType, &iWeapon, Float:vDmgForce[3], Float:vDmgPos[3], iDmgCustom)
public Action:PlayerOnTakeDamage(iVictim, &iAtker, &iInflictor, &Float:flDamage, &iDmgType, &iWeapon, Float:vDmgForce[3], Float:vDmgPos[3], iDmgCustom, Float:vPos[3])
public Action:HaleOnTakeDamage(iVictim, &iAtker, &iInflictor, &Float:flDamage, &iDmgType, &iWeapon, Float:vDmgForce[3], Float:vDmgPos[3], iDmgCustom, Float:vPos[3])
public bool:TraceEntityFilterPlayer(entity, contentsMask)
public Action:Timer_StopTickle(Handle:timer, any:userid)
public Action:Timer_NueDisguiseBackstab(Handle:timer, any:userid)
public Action:TF2_CalcIsAttackCritical(client, weapon, String:weaponname[], &bool:result)
public Action:Timer_CheckBazaar(Handle:timer, any:ref) 
public Action:Timer_CheckNueRageStab(Handle:timer, any:ref) 
public SickleClimbWalls(client)     //Credit to Mecha the Slag
public Action:Timer_NoAttacking(Handle:timer, any:ref)
public bool:TraceRayDontHitSelf(entity, mask, any:data)
public HintPanelH(Handle:menu, MenuAction:action, param1, param2)
public Action:HintPanel(client)
public QueuePanelH(Handle:menu, MenuAction:action, param1, param2)
public Action:QueuePanelCmd(client, Args)
public Action:QueuePanel(client)
public TurnToZeroPanelH(Handle:menu, MenuAction:action, param1, param2)
public Action:ResetQueuePointsCmd(client, args)
public Action:TurnToZeroPanel(client)
public Action:Command_SetHale(client, args)
public MenuHandler_SetHale(Handle:menu, MenuAction:action, client, param2)
public Action:SetDifficultyCmd(client, args)
public DifficultyDone(Handle:menu, MenuAction:action, client, param)
public Action:NeverHaleMe(client, args)
public Action:ToggleHale(client)
public ToggleHaleDone(Handle:menu, MenuAction:action, param1, param2)
public HalePanelH(Handle:menu, MenuAction:action, param1, param2)
public Action:HalePanel(client, args)
public NewPanelH(Handle:menu, MenuAction:action, param1, param2)
public Action:NewPanelCmd(client, args)
public Action:NewPanel(client, versionindex)
public HelpPanelH(Handle:menu, MenuAction:action, param1, param2)
public Action:HelpPanelCmd(client, args)
public Action:HelpPanel(client)
public Action:HelpPanel2Cmd(client, args)
public Action:HelpPanel2(client)
public Action:ClasshelpinfoCmd(client, args)
public Action:ClasshelpinfoSetting(client)
public ClasshelpinfoTogglePanelH(Handle:menu, MenuAction:action, param1, param2)
public Action:HelpPanel1(client, Args)
public Action:MusicTogglePanelCmd(client, args)
public Action:MusicTogglePanel(client)
public MusicTogglePanelH(Handle:menu, MenuAction:action, param1, param2)
public Action:VoiceTogglePanelCmd(client, args)
public Action:VoiceTogglePanel(client)
public VoiceTogglePanelH(Handle:menu, MenuAction:action, param1, param2)
public Action:HookSound(clients[64], &numClients, String:sample[PLATFORM_MAX_PATH], &entity, &channel, &Float:volume, &level, &pitch, &flags)
public OnEntityCreated(entity, const String:classname[])
public OnFoodSpawned(iSandvich)
public Action:tSetHeavyFooBar(Handle:timer, any:ref)
public Action:KillSandvich(Handle:hTimer, any:iSandvich)
public Action:OnLemonTouch(entity, other)
public OnEggBombSpawned(entity)
public Action:Timer_SetEggBomb(Handle:timer, any:ref)
public Action:Timer_SetLemon(Handle:timer, any:ref)
public Action:Hook_CommandSay(client, const String:command[], argc)
public Native_IsVSHMap(Handle:plugin, numParams)
public Native_IsEnabled(Handle:plugin, numParams)
public Native_GetHale(Handle:plugin, numParams)
public Native_IsNueRaging(Handle:plugin, numParams)
public Native_IsCapEnabled(Handle:plugin, numParams)
public Native_GetTeam(Handle:plugin, numParams)
public Native_GetSpecial(Handle:plugin, numParams)
public Native_GetHealth(Handle:plugin, numParams)
public Native_GetHealthMax(Handle:plugin, numParams)
public Native_GetRoundState(Handle:plugin, numParams)
public Native_GetDamage(Handle:plugin, numParams)
stock bool:IsSaxtonHaleMap(bool:forceRecalc = false)
stock bool:MapHasMusic(bool:forceRecalc = false)
stock bool:CheckToChangeMapDoors()
stock bool:CheckNextSpecial()
stock bool:IsDate(StartMonth, StartDate, EndMonth = 0, EndDate = 0, bool:forceRecalc = false)
stock bool:IsEasterHoliday(bool:forceRecalc = false)
stock bool:IsDecemberHoliday(bool:forceRecalc = false)
stock SearchForItemPacks()
stock SpawnRandomAmmo()
stock SpawnRandomHealth()
stock GetTeamPlayerCount(TFTeam:team)
stock CalcScores()
stock EmitSoundToAllExcept(exceptiontype = SOUNDEXCEPT_MUSIC, const String:sample[],
stock bool:CheckSoundException(client, excepttype)
stock SkipHalePanelNotify(client, bool:newchoice = true)
stock Handle:PrepareItemHandle(Handle:hItem, String:name[] = "", index = -1, const String:att[] = "", bool:dontpreserve = false)
stock ReplaceList(client)
stock RemovePlayerTarge(client)
stock RemovePlayerBack(client, indices[], len)
stock FindPlayerBack(client, indices[], len)
stock StopHaleMusic(client)
stock SetControlPoint(bool:enable)
stock SetArenaCapEnableTime(Float:time)
stock ForceHale(admin, client, bool:hidden, bool:forever = false)
stock GetRJFlag(client)
stock SetRJFlag(client, bool:bState)
stock SetAirBlastFlag(client, bool:bState)
stock DoubleJump(const any:client, Float:fl_Boost = 280.0, bool:bTrail = true)
stock bool:IsNearSpencer(client) 
stock FindSentry(client)
stock OnlyScoutsLeft()
stock GetIndexOfWeaponSlot(client, slot)
stock IsWeaponSlotActive(iClient, iSlot)
stock IsIndexActive(iClient, Index)
stock GetClientSpawnHealth(client)
stock GetClassBaseHP(client)
stock GetSpellBook(client)
stock SpawnManyAmmoPacks(client, String:model[], skin = 0, num = 14, Float:offsz = 30.0)
stock TeleportToSpawn(iClient, iTeam = 0)
stock CheckClientDifficulty(client)
stock GetClientCloakIndex(client)
stock bool:Client_IsValid(client, bool:checkConnected=true)
stock SpawnSmallHealthPackAt(client, ownerteam = 0)
stock IncrementHeadCount(client)
stock SetDecapitations(client, decaps)
stock SwitchToOtherWeapon(client)
stock RestrictToMelee(iClient) //bool:bSpawnNewMelee = false
stock SwitchToSlot(iClient, iSlot)
stock FindTeleOwner(client)
stock TF2_IsPlayerCritBuffed(client)
stock DisguiseNue(client)
stock SetNextAttack(weapon, Float:duration = 0.0)
stock FindNextHale(bool:array[])
stock bool:NextHaleTogglers(bool:array[])
stock RandomNextHale(bool:array[], bool:disconnect=true)
stock FindNextHaleEx()
stock ForceTeamWin(team)
stock AttachParticle(ent, String:particleType[], Float:offset = 0.0, bool:battach = true)
stock SpawnWeapon(client, String:name[], index, level, qual, String:att[])
stock bool:CheckHaleToggle(client)  //If true, client cannot become Hale
stock FindVersionData(Handle:panel, versionindex)
stock bool:InitFogs()
stock FogScreen(iClient, const String:sFog[])
stock SetAmmo(client, slot, ammo)
stock GetAmmo(client, slot)
stock GetHealingTarget(client)
stock CreateVM(client, String:model[])
stock AttachProjectileModel(entity, String:strModel[], String:strAnim[] = "")
stock FindEntityByClassname2(startEnt, const String:classname[])
stock TF2_RemoveWeaponSlot2(client, slot) 
stock TF2_RemoveAllWeapons2(client)
stock SetHaleHealthFix(client, health)
stock bool:IsClientChdata(client)
stock CPrintPropValue(ent, PropType:proptype, const String:prop[], bool:bFloat = false)
stock CPrintToChdata(const String:message[], any:...)
stock Client_FindBySteamId(const String:auth[])
stock Array_FindString(const String:array[][], size, const String:str[], bool:caseSensitive=true, start=0)